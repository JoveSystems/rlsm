// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// AddDual2
arma::cube AddDual2(const arma::cube& path, Rcpp::NumericVector subsim_, const arma::cube& expected_fitted, const Rcpp::Function& Reward_, const Rcpp::Function& Scrap_, Rcpp::NumericVector control_, const arma::umat& basis, const std::string& basis_type);
RcppExport SEXP rlsm_AddDual2(SEXP pathSEXP, SEXP subsim_SEXP, SEXP expected_fittedSEXP, SEXP Reward_SEXP, SEXP Scrap_SEXP, SEXP control_SEXP, SEXP basisSEXP, SEXP basis_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type subsim_(subsim_SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type expected_fitted(expected_fittedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type Reward_(Reward_SEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type Scrap_(Scrap_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type control_(control_SEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type basis_type(basis_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(AddDual2(path, subsim_, expected_fitted, Reward_, Scrap_, control_, basis, basis_type));
    return rcpp_result_gen;
END_RCPP
}
// AddDual
arma::cube AddDual(const arma::cube& path, Rcpp::NumericVector subsim_, const arma::cube& fitted_value, const Rcpp::Function& Scrap_, const arma::umat& basis, const std::string& basis_type);
RcppExport SEXP rlsm_AddDual(SEXP pathSEXP, SEXP subsim_SEXP, SEXP fitted_valueSEXP, SEXP Scrap_SEXP, SEXP basisSEXP, SEXP basis_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type subsim_(subsim_SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type fitted_value(fitted_valueSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type Scrap_(Scrap_SEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type basis_type(basis_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(AddDual(path, subsim_, fitted_value, Scrap_, basis, basis_type));
    return rcpp_result_gen;
END_RCPP
}
// PBasis
arma::mat PBasis(const arma::mat& data, const arma::umat& basis, const bool& intercept, const std::size_t& n_terms, const arma::uvec& reccur_limit);
RcppExport SEXP rlsm_PBasis(SEXP dataSEXP, SEXP basisSEXP, SEXP interceptSEXP, SEXP n_termsSEXP, SEXP reccur_limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const bool& >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const std::size_t& >::type n_terms(n_termsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type reccur_limit(reccur_limitSEXP);
    rcpp_result_gen = Rcpp::wrap(PBasis(data, basis, intercept, n_terms, reccur_limit));
    return rcpp_result_gen;
END_RCPP
}
// LBasis
arma::mat LBasis(const arma::mat& data, const arma::umat& basis, const bool& intercept, const std::size_t& n_terms, const arma::uvec& reccur_limit);
RcppExport SEXP rlsm_LBasis(SEXP dataSEXP, SEXP basisSEXP, SEXP interceptSEXP, SEXP n_termsSEXP, SEXP reccur_limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const bool& >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const std::size_t& >::type n_terms(n_termsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type reccur_limit(reccur_limitSEXP);
    rcpp_result_gen = Rcpp::wrap(LBasis(data, basis, intercept, n_terms, reccur_limit));
    return rcpp_result_gen;
END_RCPP
}
// Bounds
Rcpp::List Bounds(const arma::cube& path, const Rcpp::Function& Reward_, const Rcpp::Function& Scrap_, Rcpp::NumericVector control_, const arma::cube& mart, const arma::ucube& path_action);
RcppExport SEXP rlsm_Bounds(SEXP pathSEXP, SEXP Reward_SEXP, SEXP Scrap_SEXP, SEXP control_SEXP, SEXP martSEXP, SEXP path_actionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type Reward_(Reward_SEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type Scrap_(Scrap_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type control_(control_SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type mart(martSEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type path_action(path_actionSEXP);
    rcpp_result_gen = Rcpp::wrap(Bounds(path, Reward_, Scrap_, control_, mart, path_action));
    return rcpp_result_gen;
END_RCPP
}
// SVDCoeff
arma::vec SVDCoeff(const arma::mat& xreg, const arma::vec& yreg);
RcppExport SEXP rlsm_SVDCoeff(SEXP xregSEXP, SEXP yregSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yreg(yregSEXP);
    rcpp_result_gen = Rcpp::wrap(SVDCoeff(xreg, yreg));
    return rcpp_result_gen;
END_RCPP
}
// LSM
Rcpp::List LSM(const arma::cube& path, const Rcpp::Function& Reward_, const Rcpp::Function& Scrap_, Rcpp::NumericVector control_, const arma::umat& basis, const bool& intercept, const std::string& basis_type);
RcppExport SEXP rlsm_LSM(SEXP pathSEXP, SEXP Reward_SEXP, SEXP Scrap_SEXP, SEXP control_SEXP, SEXP basisSEXP, SEXP interceptSEXP, SEXP basis_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type Reward_(Reward_SEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type Scrap_(Scrap_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type control_(control_SEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const bool& >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type basis_type(basis_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(LSM(path, Reward_, Scrap_, control_, basis, intercept, basis_type));
    return rcpp_result_gen;
END_RCPP
}
// PathPolicy
arma::ucube PathPolicy(const arma::cube& path, const arma::cube& expected, const Rcpp::Function& Reward_, Rcpp::NumericVector control_, const arma::umat& basis, const std::string& basis_type);
RcppExport SEXP rlsm_PathPolicy(SEXP pathSEXP, SEXP expectedSEXP, SEXP Reward_SEXP, SEXP control_SEXP, SEXP basisSEXP, SEXP basis_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type expected(expectedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type Reward_(Reward_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type control_(control_SEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type basis_type(basis_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(PathPolicy(path, expected, Reward_, control_, basis, basis_type));
    return rcpp_result_gen;
END_RCPP
}
// TestPolicy
arma::vec TestPolicy(const int& start_position, const arma::cube& path, Rcpp::NumericVector control_, Rcpp::Function Reward_, Rcpp::Function Scrap_, const arma::ucube& path_action);
RcppExport SEXP rlsm_TestPolicy(SEXP start_positionSEXP, SEXP pathSEXP, SEXP control_SEXP, SEXP Reward_SEXP, SEXP Scrap_SEXP, SEXP path_actionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type start_position(start_positionSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type control_(control_SEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type Reward_(Reward_SEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type Scrap_(Scrap_SEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type path_action(path_actionSEXP);
    rcpp_result_gen = Rcpp::wrap(TestPolicy(start_position, path, control_, Reward_, Scrap_, path_action));
    return rcpp_result_gen;
END_RCPP
}
// TestPolicy2
Rcpp::List TestPolicy2(const int& start_position, const arma::cube& path, Rcpp::NumericVector control_, Rcpp::Function Reward_, Rcpp::Function Scrap_, const arma::ucube& path_action);
RcppExport SEXP rlsm_TestPolicy2(SEXP start_positionSEXP, SEXP pathSEXP, SEXP control_SEXP, SEXP Reward_SEXP, SEXP Scrap_SEXP, SEXP path_actionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type start_position(start_positionSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type control_(control_SEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type Reward_(Reward_SEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type Scrap_(Scrap_SEXP);
    Rcpp::traits::input_parameter< const arma::ucube& >::type path_action(path_actionSEXP);
    rcpp_result_gen = Rcpp::wrap(TestPolicy2(start_position, path, control_, Reward_, Scrap_, path_action));
    return rcpp_result_gen;
END_RCPP
}
