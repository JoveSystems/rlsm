// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// PBasis
arma::mat PBasis(const arma::mat& data, const arma::umat& basis, const bool& intercept, const std::size_t& n_terms);
RcppExport SEXP rlsm_PBasis(SEXP dataSEXP, SEXP basisSEXP, SEXP interceptSEXP, SEXP n_termsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const bool& >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const std::size_t& >::type n_terms(n_termsSEXP);
    rcpp_result_gen = Rcpp::wrap(PBasis(data, basis, intercept, n_terms));
    return rcpp_result_gen;
END_RCPP
}
// SVDCoeff
arma::colvec SVDCoeff(const arma::mat& xreg, const arma::vec& yreg);
RcppExport SEXP rlsm_SVDCoeff(SEXP xregSEXP, SEXP yregSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yreg(yregSEXP);
    rcpp_result_gen = Rcpp::wrap(SVDCoeff(xreg, yreg));
    return rcpp_result_gen;
END_RCPP
}
// LSM
Rcpp::List LSM(const arma::cube& path, const Rcpp::Function& Reward_, const Rcpp::Function& Scrap_, Rcpp::NumericVector control_, const arma::umat& basis, const bool& intercept, const std::string& basis_type);
RcppExport SEXP rlsm_LSM(SEXP pathSEXP, SEXP Reward_SEXP, SEXP Scrap_SEXP, SEXP control_SEXP, SEXP basisSEXP, SEXP interceptSEXP, SEXP basis_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type Reward_(Reward_SEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type Scrap_(Scrap_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type control_(control_SEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const bool& >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type basis_type(basis_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(LSM(path, Reward_, Scrap_, control_, basis, intercept, basis_type));
    return rcpp_result_gen;
END_RCPP
}
// BM
arma::mat BM(const double& start, const double& mu, const double& vol, const int& n_dec, const int& n_path, const bool& antithetic);
RcppExport SEXP rlsm_BM(SEXP startSEXP, SEXP muSEXP, SEXP volSEXP, SEXP n_decSEXP, SEXP n_pathSEXP, SEXP antitheticSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type vol(volSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_dec(n_decSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_path(n_pathSEXP);
    Rcpp::traits::input_parameter< const bool& >::type antithetic(antitheticSEXP);
    rcpp_result_gen = Rcpp::wrap(BM(start, mu, vol, n_dec, n_path, antithetic));
    return rcpp_result_gen;
END_RCPP
}
// GBM
arma::mat GBM(const double& start, const double& mu, const double& vol, const int& n_dec, const int& n_path, const bool& antithetic);
RcppExport SEXP rlsm_GBM(SEXP startSEXP, SEXP muSEXP, SEXP volSEXP, SEXP n_decSEXP, SEXP n_pathSEXP, SEXP antitheticSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type vol(volSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_dec(n_decSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_path(n_pathSEXP);
    Rcpp::traits::input_parameter< const bool& >::type antithetic(antitheticSEXP);
    rcpp_result_gen = Rcpp::wrap(GBM(start, mu, vol, n_dec, n_path, antithetic));
    return rcpp_result_gen;
END_RCPP
}
// CorrNormal
arma::mat CorrNormal(const int& n, const arma::mat& corr);
RcppExport SEXP rlsm_CorrNormal(SEXP nSEXP, SEXP corrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type corr(corrSEXP);
    rcpp_result_gen = Rcpp::wrap(CorrNormal(n, corr));
    return rcpp_result_gen;
END_RCPP
}
// CBM
arma::cube CBM(const arma::vec& start, const arma::vec& mu, const arma::vec& vol, const arma::mat& corr, const int& n_dec, const int& n_path, const bool& antithetic);
RcppExport SEXP rlsm_CBM(SEXP startSEXP, SEXP muSEXP, SEXP volSEXP, SEXP corrSEXP, SEXP n_decSEXP, SEXP n_pathSEXP, SEXP antitheticSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vol(volSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type corr(corrSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_dec(n_decSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_path(n_pathSEXP);
    Rcpp::traits::input_parameter< const bool& >::type antithetic(antitheticSEXP);
    rcpp_result_gen = Rcpp::wrap(CBM(start, mu, vol, corr, n_dec, n_path, antithetic));
    return rcpp_result_gen;
END_RCPP
}
// CGBM
arma::cube CGBM(const arma::vec& start, const arma::vec& mu, const arma::vec& vol, const arma::mat& corr, const int& n_dec, const int& n_path, const bool& antithetic);
RcppExport SEXP rlsm_CGBM(SEXP startSEXP, SEXP muSEXP, SEXP volSEXP, SEXP corrSEXP, SEXP n_decSEXP, SEXP n_pathSEXP, SEXP antitheticSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vol(volSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type corr(corrSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_dec(n_decSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_path(n_pathSEXP);
    Rcpp::traits::input_parameter< const bool& >::type antithetic(antitheticSEXP);
    rcpp_result_gen = Rcpp::wrap(CGBM(start, mu, vol, corr, n_dec, n_path, antithetic));
    return rcpp_result_gen;
END_RCPP
}
